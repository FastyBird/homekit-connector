from hashlib import sha512
from os import urandom
from typing import Union

N_3072 = int(
    'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E08'
    '8A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B'
    '302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9'
    'A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE6'
    '49286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8'
    'FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D'
    '670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C'
    '180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF695581718'
    '3995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D'
    '04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7D'
    'B3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D226'
    '1AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200C'
    'BBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFC'
    'E0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF', 16)

g = 5
g_padded = g.to_bytes(384, byteorder='big')  # left padded with 0x00 bytes to extend length to 3072 bits (384 bytes)


def H(*args: Union[bytes, int]) -> bytes:
    h = sha512()
    for arg in args:
        if isinstance(arg, int):
            arg = to_bytes(arg)
        h.update(arg)
    return h.digest()


def to_bytes(data: int) -> bytes:
    return data.to_bytes((data.bit_length() + 7) // 8, byteorder='big')


def to_int(data: bytes) -> int:
    return int.from_bytes(data, byteorder='big')


TEST_s = bytes.fromhex('BEB25379 D1A8581E B5A72767 3A2441EE')
TEST_b = bytes.fromhex('E487CB59 D31AC550 471E81F0 0F6928E0 1DDA08E9 74A004F4 9E61F5D1 05284D20')
TEST_A = bytes.fromhex(
    'FAB6F5D2 615D1E32 3512E799 1CC37443 F487DA60 4CA8C923 0FCB04E5 41DCE628'
    '0B27CA46 80B0374F 179DC3BD C7553FE6 2459798C 701AD864 A91390A2 8C93B644'
    'ADBF9C00 745B942B 79F9012A 21B9B787 82319D83 A1F83628 66FBD6F4 6BFC0DDB'
    '2E1AB6E4 B45A9906 B82E37F0 5D6F97F6 A3EB6E18 2079759C 4F684783 7B62321A'
    'C1B4FA68 641FCB4B B98DD697 A0C73641 385F4BAB 25B79358 4CC39FC8 D48D4BD8'
    '67A9A3C1 0F8EA121 70268E34 FE3BBE6F F89998D6 0DA2F3E4 283CBEC1 393D52AF'
    '724A5723 0C604E9F BCE583D7 613E6BFF D67596AD 121A8707 EEC46944 95703368'
    '6A155F64 4D5C5863 B48F61BD BF19A53E AB6DAD0A 186B8C15 2E5F5D8C AD4B0EF8'
    'AA4EA500 8834C3CD 342E5E0F 167AD045 92CD8BD2 79639398 EF9E114D FAAAB919'
    'E14E8509 89224DDD 98576D79 385D2210 902E9F9B 1F2D86CF A47EE244 635465F7'
    '1058421A 0184BE51 DD10CC9D 079E6F16 04E7AA9B 7CF7883C 7D4CE12B 06EBE160'
    '81E23F27 A231D184 32D7D1BB 55C28AE2 1FFCF005 F57528D1 5A88881B B3BBB7FE'
)

USERNAME = 'alice'
PASSWORD = 'password123'

k = to_int(H(N_3072, g_padded))
x = to_int(H(TEST_s, H(USERNAME.encode() + b':' + PASSWORD.encode())))

v = pow(g, x, N_3072)
B: int = (k * v + pow(g, to_int(TEST_b), N_3072)) % N_3072

A_int = to_int(TEST_A)
u = to_int(H(A_int, B))

S = pow(A_int * pow(v, u, N_3072), to_int(TEST_b), N_3072)

K = H(S)


def calculate_M(I: bytes, s: bytes, A: int, B: int, K) -> bytes:
    H_xor = bytes(map(lambda i: i[0] ^ i[1], zip(H(g), H(N_3072))))

    return H(H_xor, H(I), s, A, B, K)


M = calculate_M(USERNAME.encode(), TEST_s, A_int, B, K)
H_AMK = H(A_int, M, K)


print(to_int(M))
print(to_int(H_AMK))
